#This swagger is just to enable CORS correctly in API Gateway.
---
swagger: 2.0
basePath: /prod
info:
  title: AwsSamExample
schemes:
- https
paths:
  /getinfo:
    post:
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:031877956887:function:${stageVariables.LambdaFunctionName}:live/invocations

        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock

  # /getinfo/{proxy+}:
  #   post:
  #     x-amazon-apigateway-auth:
  #       type: aws_iam
  #     produces:
  #     - application/json
  #     parameters:
  #     - name: proxy
  #       in: path
  #       required: true
  #       type: string
  #     responses: {}
  #     x-amazon-apigateway-integration:
  #       uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:031877956887:function:${stageVariables.LambdaFunctionName}/invocations
  #       httpMethod: POST
  #       type: aws_proxy
  #   options:
  #     consumes:
  #     - application/json
  #     produces:
  #     - application/json
  #     responses:
  #       200:
  #         description: 200 response
  #         schema:
  #           $ref: "#/definitions/Empty"
  #         headers:
  #           Access-Control-Allow-Origin:
  #             type: string
  #           Access-Control-Allow-Methods:
  #             type: string
  #           Access-Control-Allow-Headers:
  #             type: string
  #     x-amazon-apigateway-integration:
  #       responses:
  #         default:
  #           statusCode: 200
  #           responseParameters:
  #             method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
  #             method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
  #             method.response.header.Access-Control-Allow-Origin: "'*'"
  #       passthroughBehavior: when_no_match
  #       requestTemplates:
  #         application/json: "{\"statusCode\": 200}"
  #       type: mock
definitions:
  Empty:
    type: object
    title: Empty Schema