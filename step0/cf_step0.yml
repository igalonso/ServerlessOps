AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: "Template with the all the steps previous to the workshop."
Parameters: 
  WsS3BucketBaseName:
    Type: String
    Default: serverlessops-functions
    Description: Base name of S3 bucket containing the workshop resources
  Alias:
    Type: String
    Description : "put here a unique alias to be used in your workshops"
  DataPrefix:
    Default: frontend/
    Description: source datasets S3 prefix
    Type: String

Resources:

  ServerlessOpsFrontend:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
        - AllowedOrigins: ['*']
          AllowedMethods: [GET,PUT,POST,DELETE,HEAD]
          AllowedHeaders: ['*']
 
  ServerlessOpsDeployments:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "serverlessops-deploymentbucket-${Alias}"

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ServerlessOpsFrontend
                - /*
      Bucket: !Ref ServerlessOpsFrontend
  
  CognitoIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: ServerlessOpsIdentityPool
      AllowUnauthenticatedIdentities: true
  
  CognitoUnauthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "s3:Put*"
                Resource: "*"

  CognitoIdPoolRoleAttachment:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
            unauthenticated: !GetAtt CognitoUnauthorizedRole.Arn
            authenticated: !GetAtt CognitoUnauthorizedRole.Arn     
      
  S3ObjectsHelperFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-S3CopyOver"
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Timeout: 120
      Policies:
        Statement:
              -
                Sid: BucketReadAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::${WsS3BucketBaseName}-${AWS::Region}"
                  - !Sub "arn:aws:s3:::${WsS3BucketBaseName}-${AWS::Region}/*"
              -
                Sid: DestinationBucketWriteAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:ListBucketVersions"
                  - "s3:GetBucketVersioning"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - !Sub "arn:aws:s3:::${ServerlessOpsFrontend}"
                  - !Sub "arn:aws:s3:::${ServerlessOpsFrontend}/*"
                  - !Sub "arn:aws:s3:::${ServerlessOpsDeployments}"
                  - !Sub "arn:aws:s3:::${ServerlessOpsDeployments}/*"
      CodeUri: 
        Bucket: !Sub "${WsS3BucketBaseName}-${AWS::Region}"
        Key: "functions/s3copyover.zip"

  ServerlessOpsCodeBuild:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Resource: "*"
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            - Effect: Allow
              Resource: "*"
              Action: "s3:*"
            - Effect: Allow
              Action:
              - ssm:GetParameters
              Resource: "*"
      RoleName: "ServerlessOps-codebuildrole"

  
  ServerlessOpsCloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "cloudformation.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Resource: "*"
              Action: 
              - "apigateway:*"
              - "iam:*"
              - "lambda:*"
              - "codedeploy:*"
              - "cloudformation:*"
              - "s3:*"
      RoleName: "ServerlessOps-cloudformationrole"

  CopyDataOver:
    Type: "Custom::S3Objects"
    Properties:
      ServiceToken: !GetAtt S3ObjectsHelperFunction.Arn
      SourceBucket: !Sub "${WsS3BucketBaseName}-${AWS::Region}"
      SourcePrefix: !Sub "${DataPrefix}"
      Bucket: !Ref ServerlessOpsFrontend
    
  EmptyServerlessOpsFrontend:
    Type: "Custom::S3Objects"
    Properties:
      ServiceToken: !GetAtt S3ObjectsHelperFunction.Arn
      Bucket: !Ref ServerlessOpsFrontend
  
  EmptyServerlessDeployments:
    Type: "Custom::S3Objects"
    Properties:
      ServiceToken: !GetAtt S3ObjectsHelperFunction.Arn
      Bucket: !Ref ServerlessOpsDeployments
  

Outputs:
  FrontendBucket:
    Description: Bucket where data will be placed
    Value: !Ref ServerlessOpsFrontend
  CognitoIdentityPool:
    Description: Identity pool to use in our application
    Value: !Ref CognitoIdentityPool