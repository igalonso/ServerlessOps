AWSTemplateFormatVersion: 2010-09-09
Description: "Template with the all the steps previous to the workshop."
Parameters: 
  Alias:
    Type: String
    Description : "put here a unique alias to be used in your workshops"

Resources:
  ServerlessOpsFrontend:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  CognitoIdPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: serverlessopscognitoidpool
      AllowUnauthenticatedIdentities: true

  CognitoUnauthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: "*"
  
  CognitoIdPoolRoleAttachment:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CognitoIdPool
      Roles:
        unauthenticated: !GetAtt CognitoUnauthorizedRole.Arn
        authenticated: !GetAtt CognitoUnauthorizedRole.Arn

  
  ServerlessOpsDeployments:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - ""
        - - "serverlessops-deploymentbucket-"
          - !Ref Alias

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ServerlessOpsFrontend
                - /*
      Bucket: !Ref ServerlessOpsFrontend
  


  ServerlessOpsCodeBuild:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Resource: "*"
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            - Effect: Allow
              Resource: "*"
              Action: "s3:*"
            - Effect: Allow
              Action:
              - ssm:GetParameters
              Resource: "*"
      RoleName: "ServerlessOps-codebuildrole"

  
  ServerlessOpsCloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "cloudformation.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Resource: "*"
              Action: 
              - "apigateway:*"
              - "iam:*"
              - "lambda:*"
              - "codedeploy:*"
              - "cloudformation:*"
              - "s3:*"
      RoleName: "ServerlessOps-cloudformationrole"